vector<int> NSR(vector<int>& h, int n) {
    stack<int> st;
    vector<int> right(n);
    int pseudo_index = n;
    for(int i = n-1; i>=0; i--) {
        if(st.empty())
            right[i] = pseudo_index;
        else {
            while(!st.empty() && h[st.top()] >= h[i])
                st.pop();
            if(st.empty())
                right[i] = pseudo_index;
            else
                right[i] = st.top();
        }
        st.push(i);
    }
    return right;
}

vector<int> NSL(vector<int>& h, int n) {
    stack<int> st;
    vector<int> left(n);
    int pseudo_index = -1;
    for(int i = 0; i<n; i++) {
        if(st.empty())
            left[i] = pseudo_index;
        else {
            while(!st.empty() && h[st.top()] >= h[i])
                st.pop();
            if(st.empty())
                left[i] = pseudo_index;
            else
                left[i] = st.top();
        }
        st.push(i);
    }
    return left;
}

//This is the driver function
long largestRectangle(vector<int> h) {
    int n = h.size();
    vector<int> right = NSR(h, n);
    vector<int> left  = NSL(h, n);
    vector<int> width(n);
    for(int i = 0; i<n; i++) {
        width[i] = right[i]-left[i]-1;
    }
    long max_area = 0;
    for(int i = 0; i<n; i++) {
        long a = h[i]*width[i];
        if(max_area < a)
            max_area = a;
    }

    return max_area;
}
